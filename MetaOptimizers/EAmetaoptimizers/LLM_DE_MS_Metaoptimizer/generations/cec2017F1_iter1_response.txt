### Update Rule (Mutation Equality)

The mutation equality is designed to generate offspring by considering the relationship among the decision vectors, fitness vectors, and constraints violation. The update rule is as follows:

1. **Fitness-based Weighting**: Assign weights to each decision vector based on their fitness values. The weight for the \(i\)-th decision vector is calculated as:
   \[
   w_i = \frac{1}{\text{popfits}(i) + \epsilon}
   \]
   where \(\epsilon\) is a small constant to avoid division by zero.

2. **Constraint-based Penalty**: Adjust the weights based on the constraints violation. The penalty for the \(i\)-th decision vector is calculated as:
   \[
   p_i = \exp(-\text{cons}(i))
   \]
   This ensures that decision vectors with higher constraints violation are penalized more.

3. **Weighted Combination**: Generate the offspring by taking a weighted combination of the decision vectors:
   \[
   \text{offspring} = \sum_{i=1}^{n} \left( w_i \cdot p_i \cdot \text{popdecs}(i, :) \right)
   \]
   where \(n\) is the number of decision vectors.

### MATLAB Code

```matlab
function [offspring] = updateFunc1(popdecs, popfits, cons)
    % Parameters
    epsilon = 1e-10;  % Small constant to avoid division by zero
    
    % Number of decision vectors
    n = size(popdecs, 1);
    
    % Calculate weights based on fitness values
    weights = 1 ./ (popfits + epsilon);
    
    % Calculate penalties based on constraints violation
    penalties = exp(-cons);
    
    % Combine weights and penalties
    weighted_penalties = weights .* penalties;
    
    % Normalize the weighted penalties
    normalized_weights = weighted_penalties / sum(weighted_penalties);
    
    % Generate offspring by taking a weighted combination of decision vectors
    offspring = sum(normalized_weights .* popdecs, 1);
end
```

### Explanation

- **Fitness-based Weighting**: The weights are inversely proportional to the fitness values, meaning that decision vectors with better fitness values (lower values) will have higher weights.
- **Constraint-based Penalty**: The penalties are exponentially decreasing with the constraints violation, ensuring that decision vectors with higher violations are penalized more.
- **Weighted Combination**: The offspring is generated by taking a weighted combination of the decision vectors, where the weights are adjusted by both fitness and constraints violation.

This approach ensures that the offspring is generated in a way that balances both the fitness and constraints violation, leading to a more effective optimization process.